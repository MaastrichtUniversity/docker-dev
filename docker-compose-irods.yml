version: '3'
services:
  irods-db:
    image: postgres:${ENV_POSTGRES_VERSION}
    hostname: irods-db
#   # PoC: tried this instead of wait until from within bootstrap.sh
#    healthcheck:
#      test: /usr/bin/pg_isready -t 10
#      interval: 30s
#      timeout: 10s
#      retries: 20
    environment:
      # password for postgres-database user 'postgres' (i.e. ENV_IRODS_DB_POSTGRES_PASSWORD)
      POSTGRES_PASSWORD: foobar
      ENV_IRODS_DB_NAME: icat
      ENV_IRODS_DB_USERNAME: irods
      # (test) password for postgres user 'irods'
      ENV_IRODS_DB_IRODS_PASSWORD: pgB3rKhqLGFLora
      LOGSPOUT: ignore
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./irods/irods-db/create_icat_db.sh:/docker-entrypoint-initdb.d/create_icat_db.sh
    profiles: ["minimal","backend","full"]
    # See https://docs.irods.org/4.2.11/system_overview/configuration/#special-characters
    command: postgres -c standard_conforming_strings=off
    networks:
      default:
        aliases:
          - irods-db.dh.local
      common_default:
        aliases:
          - irods-db.dh.local

  icat:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_PYTHON_PLUGIN_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
        # S3 variables to create secret files
        - ENV_S3_ACCESS_KEY_AC
        - ENV_S3_SECRET_KEY_AC
        - ENV_S3_AUTH_FILE_AC
        - ENV_S3_ACCESS_KEY_GL
        - ENV_S3_SECRET_KEY_GL
        - ENV_S3_AUTH_FILE_GL
    image: ${ENV_REGISTRY_HOST}/docker-dev/irods-base:${ENV_TAG}
    # Add TCP KEEPALIVE settings to keep long-lived idle iRODS connection alive across firewalls
    # https://github.com/irods/irods/issues/5218
    sysctls:
      - net.ipv4.tcp_keepalive_intvl=75
      - net.ipv4.tcp_keepalive_probes=9
      - net.ipv4.tcp_keepalive_time=600
    depends_on:
       - irods-db
    hostname: icat.dh.local
    ports:
      - "1247:1247"
      - "1248:1248"
      # TODO: Do we really need these ports in iCAT?
      - "20000-20199:20000-20199"
    env_file: .env
    environment:
      ENV_IRODS_DB_HOSTNAME: irods-db.dh.local
      ENV_IRODS_DB_NAME: icat
      ENV_IRODS_DB_USERNAME: irods
      ENV_IRODS_DB_PORT: 5432
      # (test) password for postgres user 'irods'
      ENV_IRODS_DB_IRODS_PASSWORD: pgB3rKhqLGFLora
      # password for postgres user 'postgres'
      # FIXME: we currently only user this to check if the icat DB exists before
      # proceeding install in iCAT. But I think we should just check that the
      # user irods exists, and then check that the DB exists using irods's
      # credentials...
      ENV_IRODS_DB_POSTGRES_PASSWORD: foobar
      # Name of SSL-related files expected in /opt/irods_ssl_staging/ (volume mapped)
      ENV_IRODS_SSL_CERT: icat.dh.local.crt
      ENV_IRODS_SSL_KEY: icat.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: dhparams.pem
      # defaults to '/etc/ssl/certs/ca-certificates.crt' (in the container)
      ENV_IRODS_SSL_CA_CERTIFICATE: test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: ICAT
      # TODO: Do we want to change this to icat?
      VIRTUAL_HOST: irods.${RIT_ENV}.rit.unimaas.nl
    profiles: ["minimal","backend","full"]
    volumes:
      # TODO: maybe make some of these :ro? More strict, we catch errors earlier?
      # SSL files
      - ./irods/icat/test-dev-ssl-certs/:/opt/irods_ssl_staging:ro
      # patch so setup_irods.py doesn't re-create tables
      - ./irods/patch/setup_irods_already_installed_dev.patch:/opt/irods/patch/setup_irods_already_installed_dev.patch
      # icat's bootstrap.sh (to be called by init.sh)
      - ./externals/dh-irods/icat/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      # icat's hooks for development
      - ./irods/icat/hooks/:/opt/irods/hooks/
      # icat's development definition of being ready
      - ./irods/icat/dh_is_ready.sh:/dh_is_ready.sh
      # mock surfsara operations (?)
      - ./irods/icat/DMFS:/opt/irods/DMFS
      # mock users
      - ./keycloak/users.json:/opt/irods/users.json
      # repos
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      # This is persistent because the delay queue depends on files in this directory
      - delay-queue:/var/lib/irods/config/packedRei
      - /etc/localtime:/etc/localtime:ro
    networks:
      default:
        aliases:
          - icat.dh.local
      common_default:
        aliases:
          - icat.dh.local

  ires-hnas-um:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_PYTHON_PLUGIN_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
        # S3 variables to create secret files
        - ENV_S3_ACCESS_KEY_AC
        - ENV_S3_SECRET_KEY_AC
        - ENV_S3_AUTH_FILE_AC
        - ENV_S3_ACCESS_KEY_GL
        - ENV_S3_SECRET_KEY_GL
        - ENV_S3_AUTH_FILE_GL
    image: ${ENV_REGISTRY_HOST}/docker-dev/irods-base:${ENV_TAG}
    # Add TCP KEEPALIVE settings to keep long-lived idle iRODS connection alive across firewalls
    # https://github.com/irods/irods/issues/5218
    sysctls:
      - net.ipv4.tcp_keepalive_intvl=75
      - net.ipv4.tcp_keepalive_probes=9
      - net.ipv4.tcp_keepalive_time=600
    hostname: ires-hnas-um.dh.local
    env_file:
      - .env
      - irods.secrets.cfg
    environment:
      # Name of SSL-related files expected in /opt/irods_ssl_staging/ (volume mapped)
      ENV_IRODS_SSL_CERT: ires-hnas-um.dh.local.crt
      ENV_IRODS_SSL_KEY: ires-hnas-um.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: dhparams.pem
      # defaults to '/etc/ssl/certs/ca-certificates.crt' (in the container)
      ENV_IRODS_SSL_CA_CERTIFICATE: test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM03
      ENV_DIRECT_INGEST_RESOURCE: "true"
      # Name for 'coordinating' resource of type replication.
      # In bootstrap_irods.sh we expect find substring 'UM' or 'AZM'
      ENV_IRODS_COOR_RESC_NAME: "replRescUM01"
      # Base name for 'storage' resources
      ENV_IRODS_STOR_RESC_NAME: "UM-hnas-4k"
      # Comment for ${HOSTNAME}Resource
      ENV_IRODS_HOST_RESC_COMMENT: "UM-UBUNTU-INGEST-RESOURCE"
      # Comment for 'coordinating' resource
      ENV_IRODS_COOR_RESC_COMMENT: "Replicated-resource-for-UM"
      # Pricing AVU for 'coordinating' resource
      ENV_IRODS_COOR_RESC_PRICING: "0.130"
      VIRTUAL_HOST: ires.${RIT_ENV}.rit.unimaas.nl
    profiles: ["backend-after-icat","full"]
    volumes:
      # SSL files
      - ./irods/ires-hnas/test-dev-ssl-certs/:/opt/irods_ssl_staging:ro
      # patch so setup_irods.py in development doesn't re-create a resource if already exists
      - ./irods/patch/setup_irods_already_installed_dev.patch:/opt/irods/patch/setup_irods_already_installed_dev.patch
      # hnas's bootstrap.sh (to be called by init.sh)
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      # hnas's hooks for development
      - ./irods/ires-hnas/hooks/:/opt/irods/hooks/
      # repos
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      # irods-helper-cmd uses /etc/secrets
      - ./irods.secrets.cfg:/etc/secrets:ro
      # emulated physical resources
      # If you want to make use of the samba mounts, comment the two lines below and uncomment the direct-dropzones & mounted-dropzones lines
      - ./staging-data/zones:/mnt/ingest/zones
      - ./staging-data/direct-ingest:/mnt/stagingResc01
      #- direct-dropzones:/mnt/stagingResc01
      #- mounted-dropzones:/mnt/ingest/zones
      # This is persistent because the delay queue depends on files in this directory
      - delay-queue:/var/lib/irods/config/packedRei
      - /etc/localtime:/etc/localtime:ro
    networks:
      default:
        aliases:
          - ires-hnas-um.dh.local
      common_default:
        aliases:
          - ires-hnas-um.dh.local

  ires-hnas-azm:
    build:
      context:  externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_PYTHON_PLUGIN_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
        # S3 variables to create secret files
        - ENV_S3_ACCESS_KEY_AC
        - ENV_S3_SECRET_KEY_AC
        - ENV_S3_AUTH_FILE_AC
        - ENV_S3_ACCESS_KEY_GL
        - ENV_S3_SECRET_KEY_GL
        - ENV_S3_AUTH_FILE_GL
    image: ${ENV_REGISTRY_HOST}/docker-dev/irods-base:${ENV_TAG}
    # Add TCP KEEPALIVE settings to keep long-lived idle iRODS connection alive across firewalls
    # https://github.com/irods/irods/issues/5218
    sysctls:
      - net.ipv4.tcp_keepalive_intvl=75
      - net.ipv4.tcp_keepalive_probes=9
      - net.ipv4.tcp_keepalive_time=600
    hostname: ires-hnas-azm.dh.local
    env_file:
      - .env
      - irods.secrets.cfg
    environment:
      # Name of SSL-related files expected in /opt/irods_ssl_staging/ (volume mapped)
      ENV_IRODS_SSL_CERT: ires-hnas-azm.dh.local.crt
      ENV_IRODS_SSL_KEY: ires-hnas-azm.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: dhparams.pem
      # defaults to '/etc/ssl/certs/ca-certificates.crt' (in the container)
      ENV_IRODS_SSL_CA_CERTIFICATE: test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_AZM
      ENV_DIRECT_INGEST_RESOURCE: "false"
      # Name for 'coordinating' resource of type replication
      # In bootstrap_irods.sh we expect find substring 'UM' or 'AZM'
      ENV_IRODS_COOR_RESC_NAME: "replRescAZM01"
      # Base name for 'storage' resources
      ENV_IRODS_STOR_RESC_NAME: "AZM-storage"
      # Comment for ${HOSTNAME}Resource
      ENV_IRODS_HOST_RESC_COMMENT: "AZM-UBUNTU-INGEST-RESOURCE"
      # Comment for 'coordinating' resource
      ENV_IRODS_COOR_RESC_COMMENT: "Replicated-resource-for-AZM"
      # Pricing AVU for 'coordinating' resource
      # TODO: This right?
      ENV_IRODS_COOR_RESC_PRICING: "0"
      VIRTUAL_HOST: ires-hnas-azm.${RIT_ENV}.rit.unimaas.nl
    profiles: ["backend-after-icat","full"]
    volumes:
      # SSL files
      - ./irods/ires-hnas/test-dev-ssl-certs/:/opt/irods_ssl_staging:ro
      # patch so setup_irods.py in development doesn't re-create a resource if already exists
      - ./irods/patch/setup_irods_already_installed_dev.patch:/opt/irods/patch/setup_irods_already_installed_dev.patch
      # hnas's bootstrap.sh (to be called by init.sh)
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      # hnas's hooks for development
      - ./irods/ires-hnas/hooks/:/opt/irods/hooks/
      # repos
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      # irods-helper-cmd uses /etc/secrets
      - ./irods.secrets.cfg:/etc/secrets:ro
      # emulated physical resources
      # If you want to make use of the samba mounts, comment the line below and uncomment the mounted-dropzones line
      - ./staging-data/zones:/mnt/ingest/zones
      #- mounted-dropzones:/mnt/ingest/zones
      # This is persistent because the delay queue depends on files in this directory
      - delay-queue:/var/lib/irods/config/packedRei
      - /etc/localtime:/etc/localtime:ro
    networks:
      default:
        aliases:
          - ires-hnas-azm.dh.local
      common_default:
        aliases:
          - ires-hnas-azm.dh.local

#  ires-ceph-ac:
#    build:
#      context: externals/dh-irods/irods-base/
#      dockerfile: Dockerfile
#      args:
#        - ENV_IRODS_VERSION
#        - ENV_IRODS_PYTHON_PLUGIN_VERSION
#        - ENV_IRODS_EXT_CLANG_VERSION
#        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
#        - ENV_FILEBEAT_VERSION
#        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
#        - ENV_DOCKERIZE_VERSION
#        - ENV_IRODS_GID
#        - ENV_IRODS_UID
#        # S3 variables to create secret files
#        - ENV_S3_ACCESS_KEY_AC
#        - ENV_S3_SECRET_KEY_AC
#        - ENV_S3_AUTH_FILE_AC
#        - ENV_S3_ACCESS_KEY_GL
#        - ENV_S3_SECRET_KEY_GL
#        - ENV_S3_AUTH_FILE_GL
#    image: ${ENV_REGISTRY_HOST}/docker-dev/irods-base:${ENV_TAG}
#    # Add TCP KEEPALIVE settings to keep long-lived idle iRODS connection alive across firewalls
#    # https://github.com/irods/irods/issues/5218
#    sysctls:
#      - net.ipv4.tcp_keepalive_intvl=75
#      - net.ipv4.tcp_keepalive_probes=9
#      - net.ipv4.tcp_keepalive_time=600
#    hostname: ires-ceph-ac.dh.local
#    env_file: .env
#    depends_on:
#      - minio1
#    environment:
#      # Name of SSL-related files expected in /opt/irods_ssl_staging/ (volume mapped)
#      ENV_IRODS_SSL_CERT: ires-ceph-ac.dh.local.crt
#      ENV_IRODS_SSL_KEY: ires-ceph-ac.dh.local.key
#      ENV_IRODS_SSL_DH_PARAMS: dhparams.pem
#      # defaults to '/etc/ssl/certs/ca-certificates.crt' (in the container)
#      ENV_IRODS_SSL_CA_CERTIFICATE: test_only_dev_irods_dh_ca_cert.pem
#      # Yet another work around :( READ corresponding entry comment in ires-ceph-gl
#      S3_AUTH_FILE: ${ENV_S3_AUTH_FILE_AC}
#      ENV_S3_RESC_NAME: "UM-Ceph-S3-AC"
#      ENV_S3_HOST: "minio1.dh.local:9000"
#      ENV_FILEBEAT_PRIMARY_TAG: IRES
#      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM04
#      VIRTUAL_HOST: ires-ceph-ac.${RIT_ENV}.rit.unimaas.nl
#    volumes:
#      # SSL files
#      - ./irods/ires-s3/test-dev-ssl-certs/:/opt/irods_ssl_staging:ro
#      # patch so we setup_irods.py doesn't re-create tables
#      - ./irods/patch/setup_irods_already_installed_dev.patch:/opt/irods/patch/setup_irods_already_installed_dev.patch
#      # ires-s3's bootstrap.sh (to be called by init.sh)
#      - ./externals/dh-irods/ires-s3/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
#      # ires-s3's hooks for development
#      - ./irods/ires-s3/hooks/:/opt/irods/hooks/
#      # repos
#      - ./externals/irods-ruleset:/rules
#      - ./externals/irods-microservices:/microservices
#      - ./externals/irods-helper-cmd:/helpers
#      # irods-helper-cmd uses /etc/secrets
#      - ./irods.secrets.cfg:/etc/secrets:ro
#      # This is persistent because the delay queue depends on files in this directory
#      - delay-queue:/var/lib/irods/config/packedRei
#      - /etc/localtime:/etc/localtime:ro
#    profiles: ["backend-after-icat","full"]
#    networks:
#      default:
#        aliases:
#          - ires-ceph-ac.dh.local
#      common_default:
#        aliases:
#          - ires-ceph-ac.dh.local
#
#  ires-ceph-gl:
#    build:
#      context: externals/dh-irods/irods-base/
#      dockerfile: Dockerfile
#      args:
#        - ENV_IRODS_VERSION
#        - ENV_IRODS_PYTHON_PLUGIN_VERSION
#        - ENV_IRODS_EXT_CLANG_VERSION
#        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
#        - ENV_FILEBEAT_VERSION
#        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
#        - ENV_DOCKERIZE_VERSION
#        - ENV_IRODS_GID
#        - ENV_IRODS_UID
#        # S3 variables to create secret files
#        - ENV_S3_ACCESS_KEY_AC
#        - ENV_S3_SECRET_KEY_AC
#        - ENV_S3_AUTH_FILE_AC
#        - ENV_S3_ACCESS_KEY_GL
#        - ENV_S3_SECRET_KEY_GL
#        - ENV_S3_AUTH_FILE_GL
#    image: ${ENV_REGISTRY_HOST}/docker-dev/irods-base:${ENV_TAG}
#    # Add TCP KEEPALIVE settings to keep long-lived idle iRODS connection alive across firewalls
#    # https://github.com/irods/irods/issues/5218
#    sysctls:
#      - net.ipv4.tcp_keepalive_intvl=75
#      - net.ipv4.tcp_keepalive_probes=9
#      - net.ipv4.tcp_keepalive_time=600
#    hostname: ires-ceph-gl.dh.local
#    env_file: .env
#    depends_on:
#      - minio2
#    environment:
#      # Name of SSL-related files expected in /opt/irods_ssl_staging/ (volume mapped)
#      ENV_IRODS_SSL_CERT: ires-ceph-gl.dh.local.crt
#      ENV_IRODS_SSL_KEY: ires-ceph-gl.dh.local.key
#      ENV_IRODS_SSL_DH_PARAMS: dhparams.pem
#      # defaults to '/etc/ssl/certs/ca-certificates.crt' (in the container)
#      ENV_IRODS_SSL_CA_CERTIFICATE: test_only_dev_irods_dh_ca_cert.pem
#      # Yet another work around :(
#      # In the ICAT DB (think production). The way the S3 resource was
#      # configured (mkresc), includes this:
#      #    iadmin mkresc .... "... S3_AUTH_FILE=/some/fixed/path/here.keypair ; .... "
#      # This probably means that iRES S3 needs to access /some/fixed/path/here.keypair
#      # to read the S3 credentials? Perhaps not? And it just read that file once during mkresc?
#      # So we should write the credentials (given right below to the container)
#      # in that path. We cannot arbitrarily choose the path, because in
#      # proc/acc it was already chosen!
#      # But wait there's more! https://github.com/irods/irods_resource_plugin_s3/issues/1837
#      # The env file must be named S3_AUTH_FILE?
#      # Is it because the value written on iCAT is actually ignored?
#      # Or... and what about what Terrell says at the end?
#      # https://github.com/irods/irods_resource_plugin_s3/issues/1837#issuecomment-965919232
#      # Do we have to create that file everywhere? What?
#      S3_AUTH_FILE: ${ENV_S3_AUTH_FILE_GL}
#      ENV_S3_RESC_NAME: "UM-Ceph-S3-GL"
#      ENV_S3_HOST: "minio2.dh.local:9000"
#      ENV_FILEBEAT_PRIMARY_TAG: IRES
#      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM01
#      VIRTUAL_HOST: ires-ceph-gl.${RIT_ENV}.rit.unimaas.nl
#    volumes:
#      # SSL files
#      - ./irods/ires-s3/test-dev-ssl-certs/:/opt/irods_ssl_staging:ro
#      # patch so we setup_irods.py doesn't re-create tables
#      - ./irods/patch/setup_irods_already_installed_dev.patch:/opt/irods/patch/setup_irods_already_installed_dev.patch
#      # ires-s3's bootstrap.sh (to be called by init.sh)
#      - ./externals/dh-irods/ires-s3/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
#      # ires-s3's hooks for development
#      - ./irods/ires-s3/hooks/:/opt/irods/hooks/
#      # repos
#      - ./externals/irods-ruleset:/rules
#      - ./externals/irods-microservices:/microservices
#      - ./externals/irods-helper-cmd:/helpers
#      # irods-helper-cmd uses /etc/secrets
#      - ./irods.secrets.cfg:/etc/secrets:ro
#      # This is persistent because the delay queue depends on files in this directory
#      - delay-queue:/var/lib/irods/config/packedRei
#      - /etc/localtime:/etc/localtime:ro
#    profiles: ["backend-after-icat","full"]
#    networks:
#      default:
#        aliases:
#          - ires-ceph-gl.dh.local
#      common_default:
#        aliases:
#          - ires-ceph-gl.dh.local
#
#  minio1:
#    image: minio/minio:RELEASE.2023-01-12T02-06-16Z
#    environment:
#      VIRTUAL_HOST: minio1.${RIT_ENV}.rit.unimaas.nl
#      MINIO_ACCESS_KEY: ${ENV_S3_ACCESS_KEY_AC}
#      MINIO_SECRET_KEY: ${ENV_S3_SECRET_KEY_AC}
#    entrypoint: sh
#    command: -c 'mkdir -p /data/dh-irods-bucket-dev && minio server /data'
#    profiles: ["backend-after-icat","full"]
#    networks:
#      default:
#        aliases:
#          - minio1.dh.local
#      common_default:
#        aliases:
#          - minio1.dh.local
#
#  minio2:
#    image: minio/minio:RELEASE.2023-01-12T02-06-16Z
#    environment:
#      VIRTUAL_HOST: minio2.${RIT_ENV}.rit.unimaas.nl
#      MINIO_ACCESS_KEY: ${ENV_S3_ACCESS_KEY_GL}
#      MINIO_SECRET_KEY: ${ENV_S3_SECRET_KEY_GL}
#    entrypoint: sh
#    command: -c 'mkdir -p /data/dh-irods-bucket-dev && minio server /data'
#    profiles: ["backend-after-icat","full"]
#    networks:
#      default:
#        aliases:
#          - minio2.dh.local
#      common_default:
#        aliases:
#          - minio2.dh.local

volumes:
  delay-queue:
  # If you want to use SAMBA, uncomment all lines below
#  mounted-dropzones:
#    driver: local
#    driver_opts:
#      type: cifs
#      device: ${INGEST_MOUNT}
#      o: "addr=um-nas201.unimaas.nl,username=${INGEST_USER},password=${INGEST_PASSWORD},vers=2.0,uid=${ENV_IRODS_UID},gid=${ENV_IRODS_GID}"
#  direct-dropzones:
#    driver: local
#    driver_opts:
#      type: cifs
#      device: ${INGEST_MOUNT}-direct
#      o: "addr=um-nas201.unimaas.nl,username=${INGEST_USER},password=${INGEST_PASSWORD},vers=2.0,uid=${ENV_IRODS_UID},gid=${ENV_IRODS_GID}"
