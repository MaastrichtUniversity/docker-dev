version: '2'
services:
  irods-db:
    image: postgres:${ENV_POSTGRES_VERSION}
    hostname: irods-db
#   # PoC: tried this instead of wait until from within bootstrap.sh
#    healthcheck:
#      test: /usr/bin/pg_isready -t 10
#      interval: 30s
#      timeout: 10s
#      retries: 20
    environment:
      # password for postgres-database user 'postgres' (i.e. ENV_IRODS_DB_POSTGRES_PASSWORD)
      POSTGRES_PASSWORD: foobar
      LOGSPOUT: ignore
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      default:
        aliases:
          - irods-db.dh.local
      common_default:
        aliases:
          - irods-db.dh.local
  icat:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
    depends_on:
       - irods-db
    hostname: icat.dh.local
    ports:
      - "1247:1247"
      - "1248:1248"
      - "20000:20199"
    env_file: .env
    environment:
      # bootstrap.sh will check RIT_ENV
      RIT_ENV: dev
      ENV_IRODS_DB_HOSTNAME: irods-db.dh.local
      ENV_IRODS_DB_NAME: icat
      ENV_IRODS_DB_USERNAME: irods
      # password for postgres user 'postgres'
      ENV_IRODS_DB_IRODS_PASSWORD: pgB3rKhqLGFLora
      # password for postgres user 'irods'
      ENV_IRODS_DB_POSTGRES_PASSWORD: foobar
      ENV_IRODS_SSL_CERT: /etc/irods/SSL/icat.dh.local.crt
      ENV_IRODS_SSL_KEY: /etc/irods/SSL/icat.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: /etc/irods/SSL/dhparams.pem
      ENV_IRODS_SSL_CA_CERFICATE: /etc/irods/SSL/test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: ICAT
      VIRTUAL_HOST: irods.${RIT_ENV}.rit.unimaas.nl
    networks:
      default:
        aliases:
          - icat.dh.local
      common_default:
        aliases:
          - icat.dh.local
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/dh-irods/icat/test-dev-ssl-certs/:/opt/certificates:ro
      - ./externals/dh-irods/icat/patch/genquery.py:/etc/irods/genquery.py
      - ./externals/dh-irods/icat/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      - ./externals/dh-irods/icat/scripts/bootstrap_irods.sh:/opt/irods/bootstrap_irods.sh
      - ./externals/dh-irods/icat/DMFS:/opt/irods/DMFS
      - ./keycloak/users.json:/opt/irods/users.json
      - microservices-build:/tmp/microservices-build

  ires-hnas-um:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
    hostname: ires-hnas-um.dh.local
    env_file:
      - .env
      - irods.secrets.cfg
    environment:
      RIT_ENV: dev
      ENV_IRODS_SSL_CERT: /etc/irods/SSL/ires-hnas-um.dh.local.crt
      ENV_IRODS_SSL_KEY: /etc/irods/SSL/ires-hnas-um.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: /etc/irods/SSL/dhparams.pem
      ENV_IRODS_SSL_CA_CERFICATE: /etc/irods/SSL/test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM03
      ENV_DIRECT_INGEST_RESOURCE: "true"
      # Name for 'coordinating' resource of type replication.
      # In bootstrap_irods.sh we expect find substring 'UM' or 'AZM'
      ENV_IRODS_COOR_RESC_NAME: "replRescUM01"
      # Base name for 'storage' resources
      ENV_IRODS_STOR_RESC_NAME: "UM-hnas-4k"
      # Comment for ${HOSTNAME}Resource
      ENV_IRODS_HOST_RESC_COMMENT: "UM-UBUNTU-INGEST-RESOURCE"
      # Comment for 'coordinating' resource
      ENV_IRODS_COOR_RESC_COMMENT: "Replicated-resource-for-UM"
      # Pricing AVU for 'coordinating' resource
      ENV_IRODS_COOR_RESC_PRICING: "0.130"
      VIRTUAL_HOST: ires.${RIT_ENV}.rit.unimaas.nl
    networks:
      default:
        aliases:
          - ires-hnas-um.dh.local
      common_default:
        aliases:
          - ires-hnas-um.dh.local
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./irods.secrets.cfg:/etc/secrets:ro
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      - ./externals/dh-irods/ires-hnas/patch/setcifsacl:/usr/bin/setcifsacl_patched
      - ./externals/dh-irods/ires-hnas/test-dev-ssl-certs/:/opt/certificates:ro
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap_irods.sh:/opt/irods/bootstrap_irods.sh
      - microservices-build:/tmp/microservices-build
    # Required for CIFS mounting. cap-add not enough in Windows for some reason.
    privileged: true

  ires-hnas-azm:
    build:
      context:  externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
    hostname: ires-hnas-azm.dh.local
    env_file:
      - .env
      - irods.secrets.cfg
    environment:
      RIT_ENV: dev
      # TODO: Not centos any more... change name everywhere
      ENV_IRODS_SSL_CERT: /etc/irods/SSL/ires-hnas-azm.dh.local.crt
      ENV_IRODS_SSL_KEY: /etc/irods/SSL/ires-hnas-azm.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: /etc/irods/SSL/dhparams.pem
      ENV_IRODS_SSL_CA_CERFICATE: /etc/irods/SSL/test_only_dev_irods_dh_ca_cert.pem
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_AZM
      # TODO: Do we want false here for azm?
      ENV_DIRECT_INGEST_RESOURCE: "false"
      # Name for 'coordinating' resource of type replication
      # In bootstrap_irods.sh we expect find substring 'UM' or 'AZM'
      ENV_IRODS_COOR_RESC_NAME: "replRescAZM01"
      # Base name for 'storage' resources
      ENV_IRODS_STOR_RESC_NAME: "AZM-storage"
      # Comment for ${HOSTNAME}Resource
      # TODO: We no longer run this in CENTOS, not changing now just in case we use it somewhere?
      ENV_IRODS_HOST_RESC_COMMENT: "AZM-CENTOS-INGEST-RESOURCE"
      # Comment for 'coordinating' resource
      ENV_IRODS_COOR_RESC_COMMENT: "Replicated-resource-for-AZM"
      # Pricing AVU for 'coordinating' resource
      # TODO: This right?
      ENV_IRODS_COOR_RESC_PRICING: "0"
      # TODO: same as before.. not centos anymore
      VIRTUAL_HOST: ires-hnas-azm.${RIT_ENV}.rit.unimaas.nl
    networks:
      default:
        aliases:
          - ires-hnas-azm.dh.local
      common_default:
        aliases:
          - ires-hnas-azm.dh.local
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./irods.secrets.cfg:/etc/secrets:ro
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      - ./externals/dh-irods/ires-hnas/patch/setcifsacl:/usr/bin/setcifsacl_patched
      - ./externals/dh-irods/ires-hnas/test-dev-ssl-certs/:/opt/certificates:ro
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      - ./externals/dh-irods/ires-hnas/scripts/bootstrap_irods.sh:/opt/irods/bootstrap_irods.sh
      - microservices-build:/tmp/microservices-build
    # Required for CIFS mounting. cap-add not enough in Windows for some reason.
    privileged: true
  ires-ceph-ac:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
    hostname: ires-ceph-ac.dh.local
    env_file: .env
    depends_on:
      - minio1
    environment:
      RIT_ENV: dev
      ENV_IRODS_SSL_CERT: /etc/irods/SSL/ires-ceph-ac.dh.local.crt
      ENV_IRODS_SSL_KEY: /etc/irods/SSL/ires-ceph-ac.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: /etc/irods/SSL/dhparams.pem
      ENV_IRODS_SSL_CA_CERFICATE: /etc/irods/SSL/test_only_dev_irods_dh_ca_cert.pem
      # Yet another work around :( READ corresponding entry comment in ires-ceph-gl
      S3_AUTH_FILE: /var/lib/irods/minio.keypair
      ENV_S3_ACCESS_KEY: ${ENV_S3_ACCESS_KEY1}
      ENV_S3_SECRET_KEY: ${ENV_S3_SECRET_KEY1}
      ENV_S3_RESC_NAME: "UM-Ceph-S3-AC"
      ENV_S3_HOST: "minio1.dh.local:9000"
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM04
      VIRTUAL_HOST: ires-s3-1.${RIT_ENV}.rit.unimaas.nl
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./irods.secrets.cfg:/etc/secrets:ro
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      - microservices-build:/tmp/microservices-build
      - ./externals/dh-irods/ires-s3/test-dev-ssl-certs/:/opt/certificates:ro
      - ./externals/dh-irods/ires-s3/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      - ./externals/dh-irods/ires-s3/scripts/bootstrap_irods.sh:/opt/irods/bootstrap_irods.sh
    networks:
      default:
        aliases:
          - ires-ceph-ac.dh.local
      common_default:
        aliases:
          - ires-ceph-ac.dh.local
  ires-ceph-gl:
    build:
      context: externals/dh-irods/irods-base/
      dockerfile: Dockerfile
      args:
        - ENV_IRODS_VERSION
        - ENV_IRODS_EXT_CLANG_VERSION
        - ENV_IRODS_EXT_CLANG_RUNTIME_VERSION
        - ENV_FILEBEAT_VERSION
        - ENV_IRODS_RESC_PLUGIN_S3_VERSION
        - ENV_DOCKERIZE_VERSION
        - ENV_IRODS_GID
        - ENV_IRODS_UID
    hostname: ires-ceph-gl.dh.local
    env_file: .env
    depends_on:
      - minio2
    environment:
      RIT_ENV: dev
      ENV_IRODS_SSL_CERT: /etc/irods/SSL/ires-ceph-gl.dh.local.crt
      ENV_IRODS_SSL_KEY: /etc/irods/SSL/ires-ceph-gl.dh.local.key
      ENV_IRODS_SSL_DH_PARAMS: /etc/irods/SSL/dhparams.pem
      ENV_IRODS_SSL_CA_CERFICATE: /etc/irods/SSL/test_only_dev_irods_dh_ca_cert.pem
      # Yet another work around :(
      # In the ICAT DB (think production). The way the S3 resource was
      # configured (mkresc), includes this:
      #    iadmin mkresc .... "... S3_AUTH_FILE=/some/fixed/path/here.keypair ; .... "
      # This probably means that iRES S3 needs to access /some/fixed/path/here.keypair
      # to read the S3 credentials? Perhaps not? And it just read that file once during mkresc?
      # So we should write the credentials (given right below to the container)
      # in that path. We cannot arbitrarily choose the path, because in
      # proc/acc it was already chosen!
      # But wait there's more! https://github.com/irods/irods_resource_plugin_s3/issues/1837
      # The env file must be named S3_AUTH_FILE?
      # Is it because the value written on iCAT is actually ignored?
      # Or... and what about what Terrell says at the end?
      # https://github.com/irods/irods_resource_plugin_s3/issues/1837#issuecomment-965919232
      # Do we have to create that file everywhere? What?
      # TODO
      S3_AUTH_FILE: /var/lib/irods/minio.keypair
      ENV_S3_ACCESS_KEY: ${ENV_S3_ACCESS_KEY2}
      ENV_S3_SECRET_KEY: ${ENV_S3_SECRET_KEY2}
      ENV_S3_RESC_NAME: "UM-Ceph-S3-GL"
      ENV_S3_HOST: "minio2.dh.local:9000"
      ENV_FILEBEAT_PRIMARY_TAG: IRES
      ENV_FILEBEAT_SECONDARY_TAG: IRES_UM01
      VIRTUAL_HOST: ires-s3-2.${RIT_ENV}.rit.unimaas.nl
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./irods.secrets.cfg:/etc/secrets:ro
      - ./externals/irods-ruleset:/rules
      - ./externals/irods-microservices:/microservices
      - ./externals/irods-helper-cmd:/helpers
      - microservices-build:/tmp/microservices-build
      - ./externals/dh-irods/ires-s3/test-dev-ssl-certs/:/opt/certificates:ro
      - ./externals/dh-irods/ires-s3/scripts/bootstrap.sh:/opt/irods/bootstrap.sh
      - ./externals/dh-irods/ires-s3/scripts/bootstrap_irods.sh:/opt/irods/bootstrap_irods.sh
    networks:
      default:
        aliases:
          - ires-ceph-gl.dh.local
      common_default:
        aliases:
          - ires-ceph-gl.dh.local
  minio1:
    image: minio/minio:RELEASE.2019-05-23T00-29-34Z
    environment:
      VIRTUAL_HOST: minio1.${RIT_ENV}.rit.unimaas.nl
      MINIO_ACCESS_KEY: ${ENV_S3_ACCESS_KEY1}
      MINIO_SECRET_KEY: ${ENV_S3_SECRET_KEY1}
    entrypoint: sh
    command: -c 'mkdir -p /data/dh-irods-bucket-dev && /usr/bin/minio server /data'
    networks:
      default:
        aliases:
          - minio1.dh.local
      common_default:
        aliases:
          - minio1.dh.local
  minio2:
    image: minio/minio:RELEASE.2019-05-23T00-29-34Z
    environment:
      VIRTUAL_HOST: minio2.${RIT_ENV}.rit.unimaas.nl
      MINIO_ACCESS_KEY: ${ENV_S3_ACCESS_KEY2}
      MINIO_SECRET_KEY: ${ENV_S3_SECRET_KEY2}
    entrypoint: sh
    command: -c 'mkdir -p /data/dh-irods-bucket-dev && /usr/bin/minio server /data'
    networks:
      default:
        aliases:
          - minio2.dh.local
      common_default:
        aliases:
          - minio2.dh.local
volumes:
  # these volumes exists so already-compiled microservices shared across
  # icat/ires's don't have to be recompiled. If icat already compiled them, no
  # need for ires's to recompilie. For acc/prod, maybe useful if container is
  # restarted, no need to recompile if already up to date? Although I don't
  # know if make will know nothing changed.
  microservices-build:
