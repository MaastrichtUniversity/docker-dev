input {
  file {
    type => "ICAT_rodslog"
    tags => ["ICAT"]
    path => [ "/LOGS/rodsLog.*" ]
  }
   file {
    type => "ICAT_reLog"
    tags => ["ICAT"]
    path => [ "/LOGS/reLog.*" ]
  }
}


filter {
     if "ICAT" in [tags] {
      if [message] =~ /environment variable set/ {drop { }}
      if [message] =~ /Authenticated/ {drop { }}
    
      grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:rods_msg}" }
      }
     
      mutate {
        add_field => { "logtrail" => "irods" }
      }
      
       grok {
          match => { "path" => "^\/(.+\/)(?<file>.+)$" }
      }
    
      if [level] == "DEBUG" {drop { }}
    
      # Get client IPs
      if [rods_msg] =~ /started/ {
                grok {
                      break_on_match => false
                      match => { "rods_msg" => "Agent\sprocess\s%{POSINT:agent_pid}\sstarted\sfor\spuser=%{USER:puser}\sand\scuser=%{EMAILADDRESS:cuser}\sfrom\s%{IPV4:irods_client_addr}" }
                      match => { "rods_msg" => "Agent\sprocess\s%{POSINT:agent_pid}\sstarted\sfor\spuser=%{USER:puser}\sand\scuser=%{USER:cuser}\sfrom\s%{IPV4:irods_client_addr}" }
                }
        }
    
    
      # GeoIP
      if [irods_client_addr] {
              geoip {
                source => "irods_client_addr"
                target => "geoip"
                database => "/etc/logstash/GeoLiteCity.dat"
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                add_tag => ["geoip"]
              }
    
              mutate {
                convert => [ "[geoip][coordinates]", "float" ]
              }
       }
       
       
       
       
       # Year is not present in the log date format, getting it from the filename
        grok {
              match => { "path" => "%{YEAR:log_year}" }
        }
        
        
        if [log_timestamp]{
            mutate {
               replace => [ "log_timestamp", "%{log_timestamp} %{log_year}" ]
               remove_field => "log_year"
            }
            date { 
              timezone => "Europe/Brussels"
              match => [ "log_timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ] 
            }
       }
     }
}
